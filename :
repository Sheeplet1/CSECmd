use ignore::WalkBuilder;
use serde::Deserialize;
use ssh2::Session;
use std::{env::current_dir, error::Error, fs, io::Read, net::TcpStream};

#[derive(Debug, Deserialize)]
pub enum Auth {
    Password(String),
    // AuthKey(AuthKey) - define AuthKey
}

#[derive(Debug, Deserialize)]
pub struct Config {
    pub server_addr: String,
    pub username: String,
    pub auth: Auth,
    pub command: String,
}

pub fn connect_and_exec(config: Config) -> Result<(), Box<dyn Error>> {
    let tcp = TcpStream::connect(config.server_addr)?;
    println!("Connecting to CSE UNSW...");

    let mut sess = Session::new()?;
    sess.set_tcp_stream(tcp);
    sess.handshake()?;
    println!("Handshake successful!");

    match config.auth {
        Auth::Password(p) => sess.userauth_password(config.username.as_str(), p.as_str())?,
    };

    println!("Authentication successful!");

    // TODO: Recursively upload files and directory to CSE to autotest/give-crate on
    // Files required for 6991: src, Cargo.toml, Cargo.lock
    // Sandbox container located at $HOME/.csecmd/<directory_name>_<command>_<time_stamp>

    // TODO: Add a clean-up part which deletes the sandbox files, otherwise
    // this will eventually cap out and/or clutter the storage allocation.

    // NOTE: Executing command stuff
    //
    // let mut channel = sess.channel_session()?;
    // channel.exec("ls")?;
    //
    // let mut output = String::new();
    // channel.read_to_string(&mut output)?;
    // println!("===== Output =====");
    // println!("{:#?}", output);
    //
    // let _ = channel.wait_close();
    // println!("Disconnected from CSE UNSW...");

    Ok(())
}

pub fn upload_dir() -> Result<(), Box<dyn Error>> {
    let dest = "$HOME/.csecmd/temp";

    // for result in Walk::new("./") {
    //     match result {
    //         Ok(entry) => println!("{}", entry.path().display()),
    //         Err(err) => println!("ERROR: {}", err),
    //     }
    // }
    
    for res in WalkBuilder::new("./").ign {
        
    }

    todo!()
}

// fn clean_up_dir() -> Result<(), Box<dyn Error>> {
//     todo!()
// }
